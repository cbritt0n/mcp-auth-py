#!/usr/bin/env python3
"""
mcp-auth setup utility - Quick configuration for different auth providers
"""
import json
import os


def create_env_file(provider: str, config: dict):
    """Create .env file with provider-specific configuration"""
    env_content = f"""# Generated by mcp-auth setup utility
JWT_SECRET={config.get('jwt_secret', 'change-this-in-production-' + os.urandom(8).hex())}
JWT_ALGORITHM=HS256
AUTH_PROVIDER={provider}
REDIS_JWKS={str(config.get('redis_jwks', False)).lower()}
"""
    
    if config.get('redis_url'):
        env_content += f"REDIS_URL={config['redis_url']}\n"
    
    if config.get('provider_config'):
        env_content += f"PROVIDER_CONFIG={json.dumps(config['provider_config'])}\n"
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print(f"‚úÖ Created .env file for {provider} provider")


def setup_local():
    """Setup local JWT provider"""
    print("üîß Setting up Local JWT Provider")
    jwt_secret = input("JWT Secret (press Enter for random): ").strip()
    if not jwt_secret:
        jwt_secret = f"mcp-auth-{os.urandom(16).hex()}"
    
    create_env_file('local', {'jwt_secret': jwt_secret})
    
    print("\nüéØ Local setup complete!")
    print("Test token generation:")
    print(f"python -c \"import jwt; print(jwt.encode({{'sub': 'test-user', 'name': 'Test User'}}, '{jwt_secret}', algorithm='HS256'))\"")


def setup_google():
    """Setup Google OAuth2 provider"""
    print("üîß Setting up Google OAuth2 Provider")
    print("You'll need a Google OAuth2 Client ID from: https://console.cloud.google.com/")
    
    client_id = input("Google Client ID: ").strip()
    if not client_id:
        print("‚ùå Client ID is required")
        return
    
    redis_jwks = input("Enable Redis JWKS caching? (y/N): ").lower().startswith('y')
    redis_url = None
    if redis_jwks:
        redis_url = input("Redis URL (redis://localhost:6379/0): ").strip() or "redis://localhost:6379/0"
    
    config = {
        'provider_config': {'audience': client_id},
        'redis_jwks': redis_jwks,
        'redis_url': redis_url
    }
    
    create_env_file('google', config)
    print("\nüéØ Google setup complete!")
    print("Install the Google provider: pip install -e .[google]")


def setup_aws():
    """Setup AWS Cognito provider"""
    print("üîß Setting up AWS Cognito Provider")
    print("You'll need Cognito User Pool details from AWS Console")
    
    region = input("AWS Region (e.g., us-west-2): ").strip()
    user_pool_id = input("Cognito User Pool ID: ").strip()
    client_id = input("App Client ID: ").strip()
    
    if not all([region, user_pool_id, client_id]):
        print("‚ùå All fields are required")
        return
    
    redis_jwks = input("Enable Redis JWKS caching? (y/N): ").lower().startswith('y')
    redis_url = None
    if redis_jwks:
        redis_url = input("Redis URL (redis://localhost:6379/0): ").strip() or "redis://localhost:6379/0"
    
    config = {
        'provider_config': {
            'cognito_region': region,
            'cognito_user_pool_id': user_pool_id,
            'audience': client_id
        },
        'redis_jwks': redis_jwks,
        'redis_url': redis_url
    }
    
    create_env_file('aws', config)
    print("\nüéØ AWS setup complete!")
    print("Install the AWS provider: pip install -e .[aws]")


def setup_azure():
    """Setup Azure AD provider"""
    print("üîß Setting up Azure AD Provider")
    print("You'll need App Registration details from Azure Portal")
    
    tenant_id = input("Tenant ID: ").strip()
    client_id = input("Application (client) ID: ").strip()
    
    if not all([tenant_id, client_id]):
        print("‚ùå All fields are required")
        return
    
    redis_jwks = input("Enable Redis JWKS caching? (y/N): ").lower().startswith('y')
    redis_url = None
    if redis_jwks:
        redis_url = input("Redis URL (redis://localhost:6379/0): ").strip() or "redis://localhost:6379/0"
    
    config = {
        'provider_config': {
            'tenant': tenant_id,
            'audience': client_id
        },
        'redis_jwks': redis_jwks,
        'redis_url': redis_url
    }
    
    create_env_file('azure', config)
    print("\nüéØ Azure setup complete!")
    print("Install the Azure provider: pip install -e .[azure]")


def main():
    print("üöÄ mcp-auth-py Setup Utility")
    print("=" * 40)
    
    if os.path.exists('.env'):
        overwrite = input("‚ö†Ô∏è  .env file exists. Overwrite? (y/N): ").lower().startswith('y')
        if not overwrite:
            print("Setup cancelled.")
            return
    
    print("\nChoose your authentication provider:")
    print("1. Local (JWT with secret key)")
    print("2. Google (OAuth2)")  
    print("3. AWS (Cognito)")
    print("4. Azure (Active Directory)")
    
    choice = input("\nEnter choice (1-4): ").strip()
    
    providers = {
        '1': setup_local,
        '2': setup_google,
        '3': setup_aws,
        '4': setup_azure
    }
    
    if choice in providers:
        providers[choice]()
        print("\nüìù Next steps:")
        print("1. Review your .env file")
        print("2. Add mcp-auth middleware to your FastAPI app")
        print("3. Check examples/ directory for usage patterns")
    else:
        print("‚ùå Invalid choice")


if __name__ == "__main__":
    main()
