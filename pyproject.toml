[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-auth-py"
version = "0.1.0"
description = "🔐 Enterprise authentication for FastAPI/ASGI — Multi-provider OAuth2 (Google/AWS/Azure/GitHub/Discord), RBAC, multi-tenancy, compliance monitoring"
authors = [{ name = "Christian Britton", email = "cbritt0n@users.noreply.github.com" }]
license = { text = "Apache-2.0" }
readme = "README.md"
requires-python = ">=3.9"
keywords = [
    "authentication", "fastapi", "jwt", "oauth2", "aws-cognito",
    "google-auth", "azure-ad", "github-oauth", "discord-oauth",
    "rbac", "multi-tenant", "enterprise", "compliance",
    "asgi", "middleware", "mcp", "security"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
]
dependencies = [
    "fastapi>=0.100.0",
    "python-jose[cryptography]>=3.3.0",
    "pydantic-settings>=2.0.0",
    "requests>=2.28.0",
]

[project.urls]
Homepage = "https://github.com/cbritt0n/mcp-auth-py"
Documentation = "https://github.com/cbritt0n/mcp-auth-py#readme"
Repository = "https://github.com/cbritt0n/mcp-auth-py"
Issues = "https://github.com/cbritt0n/mcp-auth-py/issues"
Changelog = "https://github.com/cbritt0n/mcp-auth-py/releases"

[project.optional-dependencies]
# Cloud provider SDKs (install only what you need)
google = ["google-auth>=2.15.0"]
aws = ["boto3>=1.26.0"]
azure = []  # Azure provider uses OIDC JWKS validation only

# GitHub and Discord OAuth2 providers (built-in, no extra dependencies)
github = ["httpx>=0.24.0"]
discord = ["httpx>=0.24.0"]

# Enterprise multi-tenancy features
enterprise = ["redis>=4.5.0", "httpx>=0.24.0"]

# Redis JWKS caching for better performance
redis_jwks = ["redis>=4.5.0", "httpx>=0.24.0"]

# Real-time WebSocket features
realtime = ["websockets>=11.0.0", "redis>=4.5.0"]

# Audit trail and analytics
audit = ["redis>=4.5.0"]

# High-performance distributed caching
caching = ["redis>=4.5.0"]

# RBAC Extension for role-based access control
rbac = []  # No additional dependencies required

# Production security features
security = ["httpx>=0.24.0", "redis>=4.5.0"]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "fakeredis>=2.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "pytest-redis>=2.4.0",
    "httpx>=0.24.0",
    "pytest-cov>=4.0.0",
]

# Install all providers at once
all = ["google-auth>=2.15.0", "boto3>=1.26.0", "httpx>=0.24.0"]

# Full installation with all features
full = [
    "google-auth>=2.15.0", "boto3>=1.26.0", "httpx>=0.24.0",
    "redis>=4.5.0", "websockets>=11.0.0",
    "uvicorn[standard]>=0.20.0"
]

[tool.hatch.build.targets.wheel]
packages = ["mcp_auth"]

# Tool configurations for development

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["mcp_auth"]
known_third_party = ["fastapi", "pydantic", "pytest", "redis", "aioredis"]

[tool.ruff]
line-length = 88
target-version = "py39"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise ... from ... within an except clause
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = ["E501", "F401", "F811"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --disable-warnings --asyncio-mode=auto"
testpaths = [
    "tests",
]
pythonpath = [
    ".",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
timeout = 300
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "redis: marks tests that require Redis",
    "provider: marks tests for authentication providers",
    "rbac: marks tests for RBAC functionality",
    "realtime: marks tests for real-time features",
    "audit: marks tests for audit functionality",
    "caching: marks tests for caching functionality",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["mcp_auth"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
strict_optional = false

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
